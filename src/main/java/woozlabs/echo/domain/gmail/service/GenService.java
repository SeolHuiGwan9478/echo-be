package woozlabs.echo.domain.gmail.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import woozlabs.echo.domain.calendar.dto.UnAvailableDatesResponse;
import woozlabs.echo.domain.calendar.service.CalendarService;
import woozlabs.echo.domain.chatGPT.service.ChatGptService;
import woozlabs.echo.domain.gmail.dto.draft.GmailDraftCommonRequest;
import woozlabs.echo.domain.gmail.dto.template.GenEmailTemplateSuggestionRequest;
import woozlabs.echo.domain.gmail.dto.template.GenEmailTemplateSuggestionResponse;
import woozlabs.echo.domain.gmail.dto.template.GenEmailTemplateRequest;
import woozlabs.echo.domain.gmail.dto.template.GenEmailTemplateResponse;
import woozlabs.echo.global.exception.CustomErrorException;
import woozlabs.echo.global.exception.ErrorCode;

import java.util.List;

@Service
@Slf4j
@RequiredArgsConstructor
public class GenService {
    private final ObjectMapper om;
    private final ChatGptService chatGptService;
    private final CalendarService calendarService;
    private final AsyncGmailService asyncGmailService;

    public void generateEmailTemplate(String uid, GenEmailTemplateRequest dto){
        try{
            UnAvailableDatesResponse unAvailableDatesResponse = calendarService.getDatesWithNoEventsInTwoWeeks(uid);
            List<String> unAvailableDates = unAvailableDatesResponse.getUnavailableDates();
            String result = chatGptService.generateEmailTemplate(dto.getContent(), unAvailableDates);
            GenEmailTemplateResponse templateResponse = om.readValue(result, GenEmailTemplateResponse.class); // om 에러 한번씩 발생 해결 필요
            // create draft
            GmailDraftCommonRequest request = new GmailDraftCommonRequest();
            request.setSubject("Template automatically generated by Echo");
            request.setToEmailAddress(dto.getToEmail());
            request.setBodyText(templateResponse.getTemplate());
            asyncGmailService.createDraftForReplyTemplate(uid, request, dto.getThreadId());
        }catch (Exception e) {
            throw new CustomErrorException(ErrorCode.GENERATE_EMAIL_TEMPLATE_ERROR, ErrorCode.GENERATE_EMAIL_TEMPLATE_ERROR.getMessage());
        }
    }

    public GenEmailTemplateSuggestionResponse generateEmailTemplateSuggestion(GenEmailTemplateSuggestionRequest dto){
        try{
            String result = chatGptService.generateEmailTemplateSuggestion(dto.getContent());
            return om.readValue(result, GenEmailTemplateSuggestionResponse.class);
        }catch (Exception e) {
            e.printStackTrace();
            throw new CustomErrorException(ErrorCode.GENERATE_EMAIL_TEMPLATE_QUESTION_ERROR, ErrorCode.GENERATE_EMAIL_TEMPLATE_QUESTION_ERROR.getMessage());
        }
    }
}
